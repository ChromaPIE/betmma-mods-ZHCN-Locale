[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# change all " 0 " in eval_card to " TalismanCompat(0) "
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if chips > 0 then"
position = "at"
payload = "if TalismanCompat(chips) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if mult > 0 then"
position = "at"
payload = "if TalismanCompat(mult) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if x_mult > 0 then"
position = "at"
payload = "if TalismanCompat(x_mult) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if p_dollars > 0 then"
position = "at"
payload = "if TalismanCompat(p_dollars) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if h_mult > 0 then"
position = "at"
payload = "if TalismanCompat(h_mult) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if h_x_mult > 0 then"
position = "at"
payload = "if TalismanCompat(h_x_mult) > TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if amt > 0 or amt < 0 then"
position = "at"
payload = "if TalismanCompat(amt) > TalismanCompat(0) or TalismanCompat(amt) < TalismanCompat(0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "assembled_string = assembled_string..(type(subpart) == 'string' and subpart or args.vars[tonumber(subpart[1])])"
position = "at"
payload = "assembled_string = assembled_string..(type(subpart) == 'string' and subpart or tostring(args.vars[tonumber(subpart[1])]))"
match_indent = true


# Half-life changing displayed joker limit in CardArea:draw()
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "{n=G.UIT.T, config={ref_table = self.config, ref_value = 'card_limit', scale = 0.3, colour = G.C.WHITE}},"
position = "at"
payload = "{n=G.UIT.T, config={ref_table = self.config, ref_value = self==G.jokers and used_voucher and used_voucher('half_life') and 'card_limit_ref' or 'card_limit', scale = 0.3, colour = G.C.WHITE}},"
match_indent = true

# Reincarnate changing get_current_pool to be able to return specific rarity of jokers and supporting mod rarities as long as these jokers are in G.P_JOKER_RARITY_POOLS. Set _append to BetmmaAssigningRarity and set _legendary to rarity you want
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "_starting_pool, _pool_key = G.P_JOKER_RARITY_POOLS[rarity], 'Joker'..rarity..((not _legendary and _append) or '')"
position = "before"
payload = '''
    if _append=='BetmmaAssigningRarity' and (_legendary) then
        rarity=_legendary
    end
'''
match_indent = true

# Forbidden Area adds consumables to joker slots
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.consumeables:emplace(c1)"
position = "at"
payload = '''
    if (#G.consumeables.cards < G.consumeables.config.card_limit + ((c1.edition and c1.edition.negative) and 1 or 0)) or not c1.betmma_forbidden_area_bought then
        G.consumeables:emplace(c1)
    else
        G.jokers:emplace(c1)
    end
'''
match_indent = true

# Bargain/Clearance Aisle setting first item/pack to $0
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.GAME.tags[i]:apply_to_run({type = 'shop_final_pass'})"
position = "after"
payload = '''
    end
    if used_voucher('bargain_aisle') then
        bargain_aisle_effect()
    end
    if used_voucher('clearance_aisle') then
        clearance_aisle_effect()
'''
match_indent = true


